
Master-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001170  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a8  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d4  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000399  00000000  00000000  00002c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  8a:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetPinDirection>:
	}
}
/********************************************************************************/
void WriteOnPort (pName PortName, uint8 value)
{
	(*(volatile uint8 *)(PortName+2)) = value; 	
  92:	44 23       	and	r20, r20
  94:	79 f0       	breq	.+30     	; 0xb4 <SetPinDirection+0x22>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	d1 f4       	brne	.+52     	; 0xce <SetPinDirection+0x3c>
  9a:	e8 2f       	mov	r30, r24
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	21 81       	ldd	r18, Z+1	; 0x01
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <SetPinDirection+0x18>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <SetPinDirection+0x14>
  ae:	82 2b       	or	r24, r18
  b0:	81 83       	std	Z+1, r24	; 0x01
  b2:	08 95       	ret
  b4:	e8 2f       	mov	r30, r24
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	21 81       	ldd	r18, Z+1	; 0x01
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <SetPinDirection+0x32>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <SetPinDirection+0x2e>
  c8:	80 95       	com	r24
  ca:	82 23       	and	r24, r18
  cc:	81 83       	std	Z+1, r24	; 0x01
  ce:	08 95       	ret

000000d0 <WriteOnpin>:
}

void WriteOnpin (pName PortName, uint8 PinNumber, Value val)
{
	switch (val)
  d0:	44 23       	and	r20, r20
  d2:	79 f0       	breq	.+30     	; 0xf2 <WriteOnpin+0x22>
  d4:	41 30       	cpi	r20, 0x01	; 1
  d6:	d1 f4       	brne	.+52     	; 0x10c <WriteOnpin+0x3c>
	{
		case HIGH:
			(*(volatile uint8 *)(PortName+2)) |= (1<<PinNumber);
  d8:	e8 2f       	mov	r30, r24
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	22 81       	ldd	r18, Z+2	; 0x02
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <WriteOnpin+0x18>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <WriteOnpin+0x14>
  ec:	82 2b       	or	r24, r18
  ee:	82 83       	std	Z+2, r24	; 0x02
			break; 
  f0:	08 95       	ret
		case LOW:
			(*(volatile uint8 *)(PortName+2)) &= ~(1<<PinNumber);
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	22 81       	ldd	r18, Z+2	; 0x02
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <WriteOnpin+0x32>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <WriteOnpin+0x2e>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	82 83       	std	Z+2, r24	; 0x02
 10c:	08 95       	ret

0000010e <Get_Data>:
}

void Get_Data()
{
	uint8 flage; 
	flage = UART_recieveByte();
 10e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <UART_recieveByte>
	if (flage == 'F' || flage == 'B' ||flage == 'R' ||flage == 'L')
 112:	98 2f       	mov	r25, r24
 114:	9b 7f       	andi	r25, 0xFB	; 251
 116:	92 34       	cpi	r25, 0x42	; 66
 118:	21 f0       	breq	.+8      	; 0x122 <Get_Data+0x14>
 11a:	82 35       	cpi	r24, 0x52	; 82
 11c:	11 f0       	breq	.+4      	; 0x122 <Get_Data+0x14>
 11e:	8c 34       	cpi	r24, 0x4C	; 76
 120:	19 f4       	brne	.+6      	; 0x128 <Get_Data+0x1a>
	{
		data.dir = flage;
 122:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 126:	08 95       	ret
	}
	else
	{
		data.speed = flage; 
 128:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__data_end+0x1>
 12c:	08 95       	ret

0000012e <MotorDir>:
	}
}

void MotorDir(uint8 a, uint8 b, uint8 c, uint8 d)
{
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	16 2f       	mov	r17, r22
 136:	d4 2f       	mov	r29, r20
 138:	c2 2f       	mov	r28, r18
	WriteOnpin(A,0,a);
 13a:	48 2f       	mov	r20, r24
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	89 e3       	ldi	r24, 0x39	; 57
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <WriteOnpin>
	WriteOnpin(A,1,b);
 144:	41 2f       	mov	r20, r17
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	89 e3       	ldi	r24, 0x39	; 57
 14a:	0e 94 68 00 	call	0xd0	; 0xd0 <WriteOnpin>
	WriteOnpin(A,2,c);
 14e:	4d 2f       	mov	r20, r29
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	89 e3       	ldi	r24, 0x39	; 57
 154:	0e 94 68 00 	call	0xd0	; 0xd0 <WriteOnpin>
	WriteOnpin(A,3,d);
 158:	4c 2f       	mov	r20, r28
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	89 e3       	ldi	r24, 0x39	; 57
 15e:	0e 94 68 00 	call	0xd0	; 0xd0 <WriteOnpin>
	PWM_Duty(&Left_Motors,data.speed);
 162:	ca e6       	ldi	r28, 0x6A	; 106
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	69 81       	ldd	r22, Y+1	; 0x01
 168:	83 e6       	ldi	r24, 0x63	; 99
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 4e 01 	call	0x29c	; 0x29c <PWM_Duty>
	PWM_Duty(&Right_Motors,data.speed);
 170:	69 81       	ldd	r22, Y+1	; 0x01
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 4e 01 	call	0x29c	; 0x29c <PWM_Duty>
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	08 95       	ret

00000182 <motion>:
void motion ()
{
	Get_Data();
 182:	0e 94 87 00 	call	0x10e	; 0x10e <Get_Data>
	switch (data.dir)
 186:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 18a:	86 34       	cpi	r24, 0x46	; 70
 18c:	49 f0       	breq	.+18     	; 0x1a0 <motion+0x1e>
 18e:	18 f4       	brcc	.+6      	; 0x196 <motion+0x14>
 190:	82 34       	cpi	r24, 0x42	; 66
 192:	69 f0       	breq	.+26     	; 0x1ae <motion+0x2c>
 194:	21 c0       	rjmp	.+66     	; 0x1d8 <motion+0x56>
 196:	8c 34       	cpi	r24, 0x4C	; 76
 198:	c1 f0       	breq	.+48     	; 0x1ca <motion+0x48>
 19a:	82 35       	cpi	r24, 0x52	; 82
 19c:	79 f0       	breq	.+30     	; 0x1bc <motion+0x3a>
 19e:	1c c0       	rjmp	.+56     	; 0x1d8 <motion+0x56>
	{
		case 'F':
		{
			MotorDir(1,0,1,0);
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 97 00 	call	0x12e	; 0x12e <MotorDir>
			break;
 1ac:	08 95       	ret
		}
		
		case 'B':
		{
			MotorDir(0,1,0,1);
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 97 00 	call	0x12e	; 0x12e <MotorDir>
			break;
 1ba:	08 95       	ret
		}
		case 'R':
		{
			MotorDir(1,0,0,1);
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 97 00 	call	0x12e	; 0x12e <MotorDir>
			break;
 1c8:	08 95       	ret
		}
		case 'L':
		{
			MotorDir(0,1,1,0);
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 97 00 	call	0x12e	; 0x12e <MotorDir>
			break;
 1d6:	08 95       	ret
		}
		default:
		{
			
			MotorDir (0,0,0,0);
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 97 00 	call	0x12e	; 0x12e <MotorDir>
 1e4:	08 95       	ret

000001e6 <main>:
UART_ConfigType UART_Config = {Disabled,_1_bit,_8_bit};
configType Left_Motors = {TIMER0,CLEAR_OC0,F_CPU8};
configType Right_Motors = {TIMER2,CLEAR_OC0,F_CPU8};
int main(void)
{
	UART_init(&UART_Config);
 1e6:	86 e6       	ldi	r24, 0x66	; 102
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UART_init>
	PWM_init(&Left_Motors);
 1ee:	83 e6       	ldi	r24, 0x63	; 99
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 16 01 	call	0x22c	; 0x22c <PWM_init>
	PWM_init(&Right_Motors);
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 16 01 	call	0x22c	; 0x22c <PWM_init>
	SetPinDirection(A,0,OUTPUT);
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	89 e3       	ldi	r24, 0x39	; 57
 204:	0e 94 49 00 	call	0x92	; 0x92 <SetPinDirection>
	SetPinDirection(A,1,OUTPUT);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	89 e3       	ldi	r24, 0x39	; 57
 20e:	0e 94 49 00 	call	0x92	; 0x92 <SetPinDirection>
	SetPinDirection(A,2,OUTPUT);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	89 e3       	ldi	r24, 0x39	; 57
 218:	0e 94 49 00 	call	0x92	; 0x92 <SetPinDirection>
	SetPinDirection(A,3,OUTPUT);
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	89 e3       	ldi	r24, 0x39	; 57
 222:	0e 94 49 00 	call	0x92	; 0x92 <SetPinDirection>
	
    while (1) 
    {
		motion();
 226:	0e 94 c1 00 	call	0x182	; 0x182 <motion>
 22a:	fd cf       	rjmp	.-6      	; 0x226 <main+0x40>

0000022c <PWM_init>:




void PWM_init(const configType * config_Ptr)
{
 22c:	fc 01       	movw	r30, r24
	if((config_Ptr->Timer) == TIMER0)
 22e:	80 81       	ld	r24, Z
 230:	81 11       	cpse	r24, r1
 232:	19 c0       	rjmp	.+50     	; 0x266 <PWM_init+0x3a>
	{
		SetBit(DDRB,PB3);
 234:	bb 9a       	sbi	0x17, 3	; 23
		TCNT0 = 0;
 236:	12 be       	out	0x32, r1	; 50
		OCR0  = 0;
 238:	1c be       	out	0x3c, r1	; 60
		SetBit(TCCR0,WGM01);
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	83 bf       	out	0x33, r24	; 51
		SetBit(TCCR0,WGM00);
 240:	83 b7       	in	r24, 0x33	; 51
 242:	80 64       	ori	r24, 0x40	; 64
 244:	83 bf       	out	0x33, r24	; 51
		TCCR0 = (TCCR0 & 0xCF) | ((config_Ptr->mode)<<4);
 246:	23 b7       	in	r18, 0x33	; 51
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	30 e1       	ldi	r19, 0x10	; 16
 24c:	93 9f       	mul	r25, r19
 24e:	c0 01       	movw	r24, r0
 250:	11 24       	eor	r1, r1
 252:	92 2f       	mov	r25, r18
 254:	9f 7c       	andi	r25, 0xCF	; 207
 256:	89 2b       	or	r24, r25
 258:	83 bf       	out	0x33, r24	; 51
		TCCR0 = (TCCR0 & 0xF8) | (config_Ptr->clock);
 25a:	83 b7       	in	r24, 0x33	; 51
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	92 81       	ldd	r25, Z+2	; 0x02
 260:	89 2b       	or	r24, r25
 262:	83 bf       	out	0x33, r24	; 51
 264:	08 95       	ret
	}		
	else if((config_Ptr->Timer) == TIMER2)
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	c1 f4       	brne	.+48     	; 0x29a <PWM_init+0x6e>
	{
		SetBit(DDRD,PD7);
 26a:	8f 9a       	sbi	0x11, 7	; 17
		TCNT2 = 0;
 26c:	14 bc       	out	0x24, r1	; 36
		OCR2  = 0;
 26e:	13 bc       	out	0x23, r1	; 35
		SetBit(TCCR2,WGM21);
 270:	85 b5       	in	r24, 0x25	; 37
 272:	88 60       	ori	r24, 0x08	; 8
 274:	85 bd       	out	0x25, r24	; 37
		SetBit(TCCR2,WGM20);
 276:	85 b5       	in	r24, 0x25	; 37
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	85 bd       	out	0x25, r24	; 37
		TCCR2 = (TCCR2 & 0xCF) | ((config_Ptr->mode)<<4);
 27c:	25 b5       	in	r18, 0x25	; 37
 27e:	91 81       	ldd	r25, Z+1	; 0x01
 280:	30 e1       	ldi	r19, 0x10	; 16
 282:	93 9f       	mul	r25, r19
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	92 2f       	mov	r25, r18
 28a:	9f 7c       	andi	r25, 0xCF	; 207
 28c:	89 2b       	or	r24, r25
 28e:	85 bd       	out	0x25, r24	; 37
		TCCR2 = (TCCR2 & 0xF8) | (config_Ptr->clock);
 290:	85 b5       	in	r24, 0x25	; 37
 292:	88 7f       	andi	r24, 0xF8	; 248
 294:	92 81       	ldd	r25, Z+2	; 0x02
 296:	89 2b       	or	r24, r25
 298:	85 bd       	out	0x25, r24	; 37
 29a:	08 95       	ret

0000029c <PWM_Duty>:
	}
}
void PWM_Duty(const configType * config_Ptr,uint8 duty)
{
	if((config_Ptr->Timer) ==TIMER0)
 29c:	fc 01       	movw	r30, r24
 29e:	80 81       	ld	r24, Z
 2a0:	81 11       	cpse	r24, r1
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <PWM_Duty+0xc>
	{
		OCR0 = duty;
 2a4:	6c bf       	out	0x3c, r22	; 60
 2a6:	08 95       	ret
	}
	else if((config_Ptr->Timer) ==TIMER2)
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	09 f4       	brne	.+2      	; 0x2ae <PWM_Duty+0x12>
	{
		OCR2 = duty;
 2ac:	63 bd       	out	0x23, r22	; 35
 2ae:	08 95       	ret

000002b0 <UART_init>:
	while (Str_Ptr[i] != '\0')
	{
		UART_sendByte(Str_Ptr[i]);
		i++;
	}
}
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 81       	ld	r18, Z
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	28 9f       	mul	r18, r24
 2b8:	90 01       	movw	r18, r0
 2ba:	11 24       	eor	r1, r1
 2bc:	91 81       	ldd	r25, Z+1	; 0x01
 2be:	99 0f       	add	r25, r25
 2c0:	99 0f       	add	r25, r25
 2c2:	99 0f       	add	r25, r25
 2c4:	29 2b       	or	r18, r25
 2c6:	92 2f       	mov	r25, r18
 2c8:	90 68       	ori	r25, 0x80	; 128
 2ca:	22 81       	ldd	r18, Z+2	; 0x02
 2cc:	22 0f       	add	r18, r18
 2ce:	29 2b       	or	r18, r25
 2d0:	20 bd       	out	0x20, r18	; 32
 2d2:	88 e1       	ldi	r24, 0x18	; 24
 2d4:	8a b9       	out	0x0a, r24	; 10
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	8b b9       	out	0x0b, r24	; 11
 2da:	87 e6       	ldi	r24, 0x67	; 103
 2dc:	89 b9       	out	0x09, r24	; 9
 2de:	10 bc       	out	0x20, r1	; 32
 2e0:	08 95       	ret

000002e2 <UART_recieveByte>:

uint8
UART_recieveByte(void)
{
	while(BitIsClear(UCSRA_R,RXC_B));
 2e2:	5f 9b       	sbis	0x0b, 7	; 11
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <UART_recieveByte>
	return UDR_R;
 2e6:	8c b1       	in	r24, 0x0c	; 12
}
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
